//////////////////////////////////////////////////////////////////////
// This file was automatically generated by PyCLIF.
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /tmp/clif/examples/pycocotools/python/coco.clif

#include <memory>
#include "absl/types/optional.h"
#include "pycocotools/coco.h"
#include "clif/python/postconv.h"

namespace pycocotools {
using namespace ::clif;

// CLIF use `::pycocotools::COCO` as COCO
bool Clif_PyObjAs(PyObject* input, ::pycocotools::COCO** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::pycocotools::COCO>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::pycocotools::COCO>* output);
bool Clif_PyObjAs(PyObject* input, ::pycocotools::COCO* output);
PyObject* Clif_PyObjFrom(::pycocotools::COCO*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::pycocotools::COCO>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::pycocotools::COCO>, py::PostConv);
PyObject* Clif_PyObjFrom(::pycocotools::COCO&&, py::PostConv);
PyObject* Clif_PyObjFrom(const ::pycocotools::COCO&, py::PostConv);
PyObject* Clif_PyObjFrom(const ::pycocotools::COCO*, py::PostConv);
// CLIF use `::pycocotools::COCOeval` as COCOeval
bool Clif_PyObjAs(PyObject* input, ::pycocotools::COCOeval** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::pycocotools::COCOeval>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::pycocotools::COCOeval>* output);
bool Clif_PyObjAs(PyObject* input, ::pycocotools::COCOeval* output);
PyObject* Clif_PyObjFrom(::pycocotools::COCOeval*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::pycocotools::COCOeval>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::pycocotools::COCOeval>, py::PostConv);
PyObject* Clif_PyObjFrom(::pycocotools::COCOeval&&, py::PostConv);
PyObject* Clif_PyObjFrom(const ::pycocotools::COCOeval&, py::PostConv);
PyObject* Clif_PyObjFrom(const ::pycocotools::COCOeval*, py::PostConv);

}  // namespace pycocotools

// CLIF init_module if (PyObject* m = PyImport_ImportModule("pycocotools.python.coco")) Py_DECREF(m);
// CLIF init_module else goto err;
