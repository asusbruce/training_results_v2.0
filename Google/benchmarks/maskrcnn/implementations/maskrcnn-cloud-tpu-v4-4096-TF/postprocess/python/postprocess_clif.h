//////////////////////////////////////////////////////////////////////
// This file was automatically generated by PyCLIF.
// Version 0.3
//////////////////////////////////////////////////////////////////////
// source: /tmp/clif/examples/postprocess/python/postprocess.clif

#include <memory>
#include "absl/types/optional.h"
#include "postprocess/postprocess.h"
#include "clif/python/postconv.h"

namespace segmentation {
using namespace ::clif;

// CLIF use `::segmentation::EvalPostprocessor` as EvalPostprocessor
bool Clif_PyObjAs(PyObject* input, ::segmentation::EvalPostprocessor** output);
bool Clif_PyObjAs(PyObject* input, std::shared_ptr<::segmentation::EvalPostprocessor>* output);
bool Clif_PyObjAs(PyObject* input, std::unique_ptr<::segmentation::EvalPostprocessor>* output);
bool Clif_PyObjAs(PyObject* input, ::segmentation::EvalPostprocessor* output);
PyObject* Clif_PyObjFrom(::segmentation::EvalPostprocessor*, py::PostConv);
PyObject* Clif_PyObjFrom(std::shared_ptr<::segmentation::EvalPostprocessor>, py::PostConv);
PyObject* Clif_PyObjFrom(std::unique_ptr<::segmentation::EvalPostprocessor>, py::PostConv);
PyObject* Clif_PyObjFrom(::segmentation::EvalPostprocessor&&, py::PostConv);
PyObject* Clif_PyObjFrom(const ::segmentation::EvalPostprocessor&, py::PostConv);
PyObject* Clif_PyObjFrom(const ::segmentation::EvalPostprocessor*, py::PostConv);

}  // namespace segmentation

// CLIF init_module if (PyObject* m = PyImport_ImportModule("postprocess.python.postprocess")) Py_DECREF(m);
// CLIF init_module else goto err;
